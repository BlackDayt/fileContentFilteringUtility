import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;

public class TestTask {
    private static final Scanner scanner = new Scanner(System.in);

    private static final List<File> inputFiles = new ArrayList<>();
    private static final List<File> outputFiles = new ArrayList<>();
    private static String prefix = "";
    private static String path = "C:\\Java\\projects\\test_task";
    private static boolean isFullStatistic = false;
    private static boolean addMode = false;

    private static final List<Long> integers = new ArrayList<>();
    private static final List<Double> floats = new ArrayList<>();
    private static final List<String> strings = new ArrayList<>();

    private static final Map<String, List<?>> outputMap = new HashMap<>(Map.of(
            "integers.txt", integers,
            "floats.txt", floats,
            "strings.txt", strings
    ));



    public static void main(String[] args) {
//        deleteFiles();

        readCommand();

        readInputFiles();
        createFiles();
        createStatistic();


    }


    public static void readCommand() {
        String command = scanner.nextLine();
//        String command = "-f in1.txt in2.txt";
        String[] commandParts = command.split(" ");
        for (int i=0; i<commandParts.length; i++) {
            switch (commandParts[i]) {
                case "-o" -> {
                    if (commandParts[i + 1].startsWith("-")) {
                        System.out.println("Путь не задан");
                        break;
                    }
                    path = commandParts[i + 1];

                    System.out.println("Задали путь");
                }
                case "-p" -> {
                    if (commandParts[i + 1].startsWith("-")) {
                        System.out.println("Префикс задан не корректно");
                        break;
                    }
                    prefix = commandParts[i + 1];
                    System.out.println("Задали префикс");
                }
                case "-s" -> {
                    isFullStatistic = false;
                    System.out.println("Вывести короткую статистику");
                }
                case "-f" -> {
                    isFullStatistic = true;
                    System.out.println("Вывести полную статистику");
                }
                case "-a" -> {
                    addMode = true;
                    System.out.println("Включен режим добавления");
                }
            }
            if (commandParts[i].matches("\\b\\w+\\.txt\\b")) {
                inputFiles.add(new File(commandParts[i]));
            }
        }

        System.out.println("Command: " + Arrays.toString(inputFiles.toArray()));
    }


    public static void readInputFiles() {
        for (File file :
                inputFiles) {
            try (BufferedReader reader = Files.newBufferedReader(Paths.get(file.getPath()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    try {
                        Long i = Long.valueOf(line);
                        TestTask.integers.add(i);
                    } catch (NumberFormatException eFloat) {
                        try {
                            Double d = Double.valueOf(line);
                            floats.add(d);
                        } catch (NumberFormatException eInt) {
                            strings.add(line);
                        }
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
        System.out.println("Files was read");
    }

    public static void createFiles() {
        for (String key :
                outputMap.keySet()) {

            String fileName = key;
            if (!getPrefix().isEmpty()) fileName = prefix.concat(fileName);
            File file = new File(new File(path), fileName);

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file, addMode))) {
                if (file.createNewFile()) System.out.println("File is created");
                for (Object o:
                     outputMap.get(key)) {
                        writer.write(String.valueOf(o));
                        writer.newLine();
                }
                System.out.println("Data was writen in file \"" + fileName + "\"");
            } catch (IOException e) {
                throw new RuntimeException(e);
            } catch (SecurityException e) {
                throw new RuntimeException();
            }

            outputFiles.add(file);
        }


    }

    public static void createStatistic() {
        System.out.println("Количество элементов записанные в исходящие файлы:");
        if (!integers.isEmpty()) System.out.println(prefix.concat("integers.txt :") + integers.size());
        if (!floats.isEmpty()) System.out.println(prefix.concat("floats.txt :") + floats.size());
        if (!strings.isEmpty()) System.out.println(prefix.concat("strings.txt :") + strings.size());
        System.out.println();

        if(isFullStatistic) {
            if (!integers.isEmpty()) {
                System.out.println("*************");
                long max = Collections.max(integers);
                long min = Collections.min(integers);
                long sum = integers.stream().mapToLong(Long::longValue).sum();
                double average = integers.stream().mapToLong(Long::longValue).average().orElse(0);
                System.out.println("Для файла " + prefix.concat("integers.txt:"));
                System.out.println("Максимальное значение: " + max);
                System.out.println("Минимальное значение: " + min);
                System.out.println("Сумма чисел: " + sum);
                System.out.println("Среднее значение: " + average);
                System.out.println();
            }

            if (!floats.isEmpty()) {
                System.out.println("*************");
                double max = Collections.max(floats);
                double min = Collections.min(floats);
                double sum = floats.stream().mapToDouble(Double::doubleValue).sum();
                double average = floats.stream().mapToDouble(Double::doubleValue).average().orElse(0);
                System.out.println("Для файла " + prefix.concat("floats.txt:"));
                System.out.println("Максимальное значение: " + max);
                System.out.println("Минимальное значение: " + min);
                System.out.println("Сумма чисел: " + sum);
                System.out.println("Среднее значение: " + average);
                System.out.println();
            }

            if (!strings.isEmpty()) {
                System.out.println("*************");
                int max = Collections.max(strings, Comparator.comparingInt(String::length)).length();
                int min = Collections.min(strings, Comparator.comparingInt(String::length)).length();
                System.out.println("Для файла " + prefix.concat("strings.txt:"));
                System.out.println("Размер самой длинной строки: " + max);
                System.out.println("Размер самой короткой строки: " + min);
                System.out.println();
            }
        }
    }

    public static void parameterReset() {
        inputFiles.clear();
        outputFiles.clear();

//        setPath("C:\\Java\\projects\\test_task");
        setAddMode(false);
        setPrefix("");
        setIsFullStatistic(false);

        integers.clear();
        floats.clear();
        strings.clear();

    }

    public static void deleteFiles() {
        for (File file :
                outputFiles) {
            file.delete();
        }
        System.out.println("Files was deleted");
    }

    public static String getPrefix() {
        return prefix;
    }

    public static void setPrefix(String prefix) {
        TestTask.prefix = prefix;
    }

    public static String getPath() {
        return path;
    }

    public static void setPath(String path) {
        TestTask.path = path;
    }

    public static boolean isAddMode() {
        return addMode;
    }

    public static void setAddMode(boolean addMode) {
        TestTask.addMode = addMode;
    }

    public static boolean isIsFullStatistic() {
        return isFullStatistic;
    }

    public static void setIsFullStatistic(boolean isFullStatistic) {
        TestTask.isFullStatistic = isFullStatistic;
    }
}
//"C:\\Users\\proto\\Desktop\\test.txt"
//"C:\Users\\proto\Desktop"